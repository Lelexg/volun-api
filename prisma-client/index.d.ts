// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cause: (where?: CauseWhereInput) => Promise<boolean>;
  socialNetwork: (where?: SocialNetworkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cause: (where: CauseWhereUniqueInput) => CauseNullablePromise;
  causes: (args?: {
    where?: CauseWhereInput;
    orderBy?: CauseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cause>;
  causesConnection: (args?: {
    where?: CauseWhereInput;
    orderBy?: CauseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CauseConnectionPromise;
  socialNetwork: (
    where: SocialNetworkWhereUniqueInput
  ) => SocialNetworkNullablePromise;
  socialNetworks: (args?: {
    where?: SocialNetworkWhereInput;
    orderBy?: SocialNetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SocialNetwork>;
  socialNetworksConnection: (args?: {
    where?: SocialNetworkWhereInput;
    orderBy?: SocialNetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SocialNetworkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCause: (data: CauseCreateInput) => CausePromise;
  updateCause: (args: {
    data: CauseUpdateInput;
    where: CauseWhereUniqueInput;
  }) => CausePromise;
  updateManyCauses: (args: {
    data: CauseUpdateManyMutationInput;
    where?: CauseWhereInput;
  }) => BatchPayloadPromise;
  upsertCause: (args: {
    where: CauseWhereUniqueInput;
    create: CauseCreateInput;
    update: CauseUpdateInput;
  }) => CausePromise;
  deleteCause: (where: CauseWhereUniqueInput) => CausePromise;
  deleteManyCauses: (where?: CauseWhereInput) => BatchPayloadPromise;
  createSocialNetwork: (data: SocialNetworkCreateInput) => SocialNetworkPromise;
  updateSocialNetwork: (args: {
    data: SocialNetworkUpdateInput;
    where: SocialNetworkWhereUniqueInput;
  }) => SocialNetworkPromise;
  updateManySocialNetworks: (args: {
    data: SocialNetworkUpdateManyMutationInput;
    where?: SocialNetworkWhereInput;
  }) => BatchPayloadPromise;
  upsertSocialNetwork: (args: {
    where: SocialNetworkWhereUniqueInput;
    create: SocialNetworkCreateInput;
    update: SocialNetworkUpdateInput;
  }) => SocialNetworkPromise;
  deleteSocialNetwork: (
    where: SocialNetworkWhereUniqueInput
  ) => SocialNetworkPromise;
  deleteManySocialNetworks: (
    where?: SocialNetworkWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cause: (
    where?: CauseSubscriptionWhereInput
  ) => CauseSubscriptionPayloadSubscription;
  socialNetwork: (
    where?: SocialNetworkSubscriptionWhereInput
  ) => SocialNetworkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CauseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC";

export type SocialNetworkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "facebook_ASC"
  | "facebook_DESC"
  | "instagram_ASC"
  | "instagram_DESC"
  | "linkedin_ASC"
  | "linkedin_DESC"
  | "twitter_ASC"
  | "twitter_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "phone_ASC"
  | "phone_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CauseWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface CauseWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  userId?: Maybe<UserWhereInput>;
  AND?: Maybe<CauseWhereInput[] | CauseWhereInput>;
  OR?: Maybe<CauseWhereInput[] | CauseWhereInput>;
  NOT?: Maybe<CauseWhereInput[] | CauseWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  cause_every?: Maybe<CauseWhereInput>;
  cause_some?: Maybe<CauseWhereInput>;
  cause_none?: Maybe<CauseWhereInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  socialNetwork?: Maybe<SocialNetworkWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface SocialNetworkWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  facebook?: Maybe<String>;
  facebook_not?: Maybe<String>;
  facebook_in?: Maybe<String[] | String>;
  facebook_not_in?: Maybe<String[] | String>;
  facebook_lt?: Maybe<String>;
  facebook_lte?: Maybe<String>;
  facebook_gt?: Maybe<String>;
  facebook_gte?: Maybe<String>;
  facebook_contains?: Maybe<String>;
  facebook_not_contains?: Maybe<String>;
  facebook_starts_with?: Maybe<String>;
  facebook_not_starts_with?: Maybe<String>;
  facebook_ends_with?: Maybe<String>;
  facebook_not_ends_with?: Maybe<String>;
  instagram?: Maybe<String>;
  instagram_not?: Maybe<String>;
  instagram_in?: Maybe<String[] | String>;
  instagram_not_in?: Maybe<String[] | String>;
  instagram_lt?: Maybe<String>;
  instagram_lte?: Maybe<String>;
  instagram_gt?: Maybe<String>;
  instagram_gte?: Maybe<String>;
  instagram_contains?: Maybe<String>;
  instagram_not_contains?: Maybe<String>;
  instagram_starts_with?: Maybe<String>;
  instagram_not_starts_with?: Maybe<String>;
  instagram_ends_with?: Maybe<String>;
  instagram_not_ends_with?: Maybe<String>;
  linkedin?: Maybe<String>;
  linkedin_not?: Maybe<String>;
  linkedin_in?: Maybe<String[] | String>;
  linkedin_not_in?: Maybe<String[] | String>;
  linkedin_lt?: Maybe<String>;
  linkedin_lte?: Maybe<String>;
  linkedin_gt?: Maybe<String>;
  linkedin_gte?: Maybe<String>;
  linkedin_contains?: Maybe<String>;
  linkedin_not_contains?: Maybe<String>;
  linkedin_starts_with?: Maybe<String>;
  linkedin_not_starts_with?: Maybe<String>;
  linkedin_ends_with?: Maybe<String>;
  linkedin_not_ends_with?: Maybe<String>;
  twitter?: Maybe<String>;
  twitter_not?: Maybe<String>;
  twitter_in?: Maybe<String[] | String>;
  twitter_not_in?: Maybe<String[] | String>;
  twitter_lt?: Maybe<String>;
  twitter_lte?: Maybe<String>;
  twitter_gt?: Maybe<String>;
  twitter_gte?: Maybe<String>;
  twitter_contains?: Maybe<String>;
  twitter_not_contains?: Maybe<String>;
  twitter_starts_with?: Maybe<String>;
  twitter_not_starts_with?: Maybe<String>;
  twitter_ends_with?: Maybe<String>;
  twitter_not_ends_with?: Maybe<String>;
  userId?: Maybe<UserWhereInput>;
  AND?: Maybe<SocialNetworkWhereInput[] | SocialNetworkWhereInput>;
  OR?: Maybe<SocialNetworkWhereInput[] | SocialNetworkWhereInput>;
  NOT?: Maybe<SocialNetworkWhereInput[] | SocialNetworkWhereInput>;
}

export type SocialNetworkWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
  email?: Maybe<String>;
}>;

export interface CauseCreateInput {
  description?: Maybe<String>;
  userId?: Maybe<UserCreateOneWithoutCauseInput>;
}

export interface UserCreateOneWithoutCauseInput {
  create?: Maybe<UserCreateWithoutCauseInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCauseInput {
  email: String;
  firstname: String;
  lastname: String;
  phone?: Maybe<String>;
  socialNetwork: SocialNetworkCreateOneWithoutUserIdInput;
}

export interface SocialNetworkCreateOneWithoutUserIdInput {
  create?: Maybe<SocialNetworkCreateWithoutUserIdInput>;
  connect?: Maybe<SocialNetworkWhereUniqueInput>;
}

export interface SocialNetworkCreateWithoutUserIdInput {
  facebook?: Maybe<String>;
  instagram?: Maybe<String>;
  linkedin?: Maybe<String>;
  twitter?: Maybe<String>;
}

export interface CauseUpdateInput {
  description?: Maybe<String>;
  userId?: Maybe<UserUpdateOneWithoutCauseInput>;
}

export interface UserUpdateOneWithoutCauseInput {
  create?: Maybe<UserCreateWithoutCauseInput>;
  update?: Maybe<UserUpdateWithoutCauseDataInput>;
  upsert?: Maybe<UserUpsertWithoutCauseInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCauseDataInput {
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  phone?: Maybe<String>;
  socialNetwork?: Maybe<SocialNetworkUpdateOneRequiredWithoutUserIdInput>;
}

export interface SocialNetworkUpdateOneRequiredWithoutUserIdInput {
  create?: Maybe<SocialNetworkCreateWithoutUserIdInput>;
  update?: Maybe<SocialNetworkUpdateWithoutUserIdDataInput>;
  upsert?: Maybe<SocialNetworkUpsertWithoutUserIdInput>;
  connect?: Maybe<SocialNetworkWhereUniqueInput>;
}

export interface SocialNetworkUpdateWithoutUserIdDataInput {
  facebook?: Maybe<String>;
  instagram?: Maybe<String>;
  linkedin?: Maybe<String>;
  twitter?: Maybe<String>;
}

export interface SocialNetworkUpsertWithoutUserIdInput {
  update: SocialNetworkUpdateWithoutUserIdDataInput;
  create: SocialNetworkCreateWithoutUserIdInput;
}

export interface UserUpsertWithoutCauseInput {
  update: UserUpdateWithoutCauseDataInput;
  create: UserCreateWithoutCauseInput;
}

export interface CauseUpdateManyMutationInput {
  description?: Maybe<String>;
}

export interface SocialNetworkCreateInput {
  facebook?: Maybe<String>;
  instagram?: Maybe<String>;
  linkedin?: Maybe<String>;
  twitter?: Maybe<String>;
  userId: UserCreateOneWithoutSocialNetworkInput;
}

export interface UserCreateOneWithoutSocialNetworkInput {
  create?: Maybe<UserCreateWithoutSocialNetworkInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSocialNetworkInput {
  cause?: Maybe<CauseCreateManyWithoutUserIdInput>;
  email: String;
  firstname: String;
  lastname: String;
  phone?: Maybe<String>;
}

export interface CauseCreateManyWithoutUserIdInput {
  create?: Maybe<
    CauseCreateWithoutUserIdInput[] | CauseCreateWithoutUserIdInput
  >;
  connect?: Maybe<CauseWhereUniqueInput[] | CauseWhereUniqueInput>;
}

export interface CauseCreateWithoutUserIdInput {
  description?: Maybe<String>;
}

export interface SocialNetworkUpdateInput {
  facebook?: Maybe<String>;
  instagram?: Maybe<String>;
  linkedin?: Maybe<String>;
  twitter?: Maybe<String>;
  userId?: Maybe<UserUpdateOneRequiredWithoutSocialNetworkInput>;
}

export interface UserUpdateOneRequiredWithoutSocialNetworkInput {
  create?: Maybe<UserCreateWithoutSocialNetworkInput>;
  update?: Maybe<UserUpdateWithoutSocialNetworkDataInput>;
  upsert?: Maybe<UserUpsertWithoutSocialNetworkInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSocialNetworkDataInput {
  cause?: Maybe<CauseUpdateManyWithoutUserIdInput>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface CauseUpdateManyWithoutUserIdInput {
  create?: Maybe<
    CauseCreateWithoutUserIdInput[] | CauseCreateWithoutUserIdInput
  >;
  delete?: Maybe<CauseWhereUniqueInput[] | CauseWhereUniqueInput>;
  connect?: Maybe<CauseWhereUniqueInput[] | CauseWhereUniqueInput>;
  set?: Maybe<CauseWhereUniqueInput[] | CauseWhereUniqueInput>;
  disconnect?: Maybe<CauseWhereUniqueInput[] | CauseWhereUniqueInput>;
  update?: Maybe<
    | CauseUpdateWithWhereUniqueWithoutUserIdInput[]
    | CauseUpdateWithWhereUniqueWithoutUserIdInput
  >;
  upsert?: Maybe<
    | CauseUpsertWithWhereUniqueWithoutUserIdInput[]
    | CauseUpsertWithWhereUniqueWithoutUserIdInput
  >;
  deleteMany?: Maybe<CauseScalarWhereInput[] | CauseScalarWhereInput>;
  updateMany?: Maybe<
    CauseUpdateManyWithWhereNestedInput[] | CauseUpdateManyWithWhereNestedInput
  >;
}

export interface CauseUpdateWithWhereUniqueWithoutUserIdInput {
  where: CauseWhereUniqueInput;
  data: CauseUpdateWithoutUserIdDataInput;
}

export interface CauseUpdateWithoutUserIdDataInput {
  description?: Maybe<String>;
}

export interface CauseUpsertWithWhereUniqueWithoutUserIdInput {
  where: CauseWhereUniqueInput;
  update: CauseUpdateWithoutUserIdDataInput;
  create: CauseCreateWithoutUserIdInput;
}

export interface CauseScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<CauseScalarWhereInput[] | CauseScalarWhereInput>;
  OR?: Maybe<CauseScalarWhereInput[] | CauseScalarWhereInput>;
  NOT?: Maybe<CauseScalarWhereInput[] | CauseScalarWhereInput>;
}

export interface CauseUpdateManyWithWhereNestedInput {
  where: CauseScalarWhereInput;
  data: CauseUpdateManyDataInput;
}

export interface CauseUpdateManyDataInput {
  description?: Maybe<String>;
}

export interface UserUpsertWithoutSocialNetworkInput {
  update: UserUpdateWithoutSocialNetworkDataInput;
  create: UserCreateWithoutSocialNetworkInput;
}

export interface SocialNetworkUpdateManyMutationInput {
  facebook?: Maybe<String>;
  instagram?: Maybe<String>;
  linkedin?: Maybe<String>;
  twitter?: Maybe<String>;
}

export interface UserCreateInput {
  cause?: Maybe<CauseCreateManyWithoutUserIdInput>;
  email: String;
  firstname: String;
  lastname: String;
  phone?: Maybe<String>;
  socialNetwork: SocialNetworkCreateOneWithoutUserIdInput;
}

export interface UserUpdateInput {
  cause?: Maybe<CauseUpdateManyWithoutUserIdInput>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  phone?: Maybe<String>;
  socialNetwork?: Maybe<SocialNetworkUpdateOneRequiredWithoutUserIdInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface CauseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CauseWhereInput>;
  AND?: Maybe<CauseSubscriptionWhereInput[] | CauseSubscriptionWhereInput>;
  OR?: Maybe<CauseSubscriptionWhereInput[] | CauseSubscriptionWhereInput>;
  NOT?: Maybe<CauseSubscriptionWhereInput[] | CauseSubscriptionWhereInput>;
}

export interface SocialNetworkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SocialNetworkWhereInput>;
  AND?: Maybe<
    SocialNetworkSubscriptionWhereInput[] | SocialNetworkSubscriptionWhereInput
  >;
  OR?: Maybe<
    SocialNetworkSubscriptionWhereInput[] | SocialNetworkSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SocialNetworkSubscriptionWhereInput[] | SocialNetworkSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Cause {
  id: Int;
  description?: String;
}

export interface CausePromise extends Promise<Cause>, Fragmentable {
  id: () => Promise<Int>;
  description: () => Promise<String>;
  userId: <T = UserPromise>() => T;
}

export interface CauseSubscription
  extends Promise<AsyncIterator<Cause>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  userId: <T = UserSubscription>() => T;
}

export interface CauseNullablePromise
  extends Promise<Cause | null>,
    Fragmentable {
  id: () => Promise<Int>;
  description: () => Promise<String>;
  userId: <T = UserPromise>() => T;
}

export interface User {
  id: Int;
  email: String;
  firstname: String;
  lastname: String;
  phone?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<Int>;
  cause: <T = FragmentableArray<Cause>>(args?: {
    where?: CauseWhereInput;
    orderBy?: CauseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  phone: () => Promise<String>;
  socialNetwork: <T = SocialNetworkPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cause: <T = Promise<AsyncIterator<CauseSubscription>>>(args?: {
    where?: CauseWhereInput;
    orderBy?: CauseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  socialNetwork: <T = SocialNetworkSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<Int>;
  cause: <T = FragmentableArray<Cause>>(args?: {
    where?: CauseWhereInput;
    orderBy?: CauseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  phone: () => Promise<String>;
  socialNetwork: <T = SocialNetworkPromise>() => T;
}

export interface SocialNetwork {
  id: Int;
  facebook?: String;
  instagram?: String;
  linkedin?: String;
  twitter?: String;
}

export interface SocialNetworkPromise
  extends Promise<SocialNetwork>,
    Fragmentable {
  id: () => Promise<Int>;
  facebook: () => Promise<String>;
  instagram: () => Promise<String>;
  linkedin: () => Promise<String>;
  twitter: () => Promise<String>;
  userId: <T = UserPromise>() => T;
}

export interface SocialNetworkSubscription
  extends Promise<AsyncIterator<SocialNetwork>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  facebook: () => Promise<AsyncIterator<String>>;
  instagram: () => Promise<AsyncIterator<String>>;
  linkedin: () => Promise<AsyncIterator<String>>;
  twitter: () => Promise<AsyncIterator<String>>;
  userId: <T = UserSubscription>() => T;
}

export interface SocialNetworkNullablePromise
  extends Promise<SocialNetwork | null>,
    Fragmentable {
  id: () => Promise<Int>;
  facebook: () => Promise<String>;
  instagram: () => Promise<String>;
  linkedin: () => Promise<String>;
  twitter: () => Promise<String>;
  userId: <T = UserPromise>() => T;
}

export interface CauseConnection {
  pageInfo: PageInfo;
  edges: CauseEdge[];
}

export interface CauseConnectionPromise
  extends Promise<CauseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CauseEdge>>() => T;
  aggregate: <T = AggregateCausePromise>() => T;
}

export interface CauseConnectionSubscription
  extends Promise<AsyncIterator<CauseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CauseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCauseSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CauseEdge {
  node: Cause;
  cursor: String;
}

export interface CauseEdgePromise extends Promise<CauseEdge>, Fragmentable {
  node: <T = CausePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CauseEdgeSubscription
  extends Promise<AsyncIterator<CauseEdge>>,
    Fragmentable {
  node: <T = CauseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCause {
  count: Int;
}

export interface AggregateCausePromise
  extends Promise<AggregateCause>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCauseSubscription
  extends Promise<AsyncIterator<AggregateCause>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SocialNetworkConnection {
  pageInfo: PageInfo;
  edges: SocialNetworkEdge[];
}

export interface SocialNetworkConnectionPromise
  extends Promise<SocialNetworkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SocialNetworkEdge>>() => T;
  aggregate: <T = AggregateSocialNetworkPromise>() => T;
}

export interface SocialNetworkConnectionSubscription
  extends Promise<AsyncIterator<SocialNetworkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SocialNetworkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSocialNetworkSubscription>() => T;
}

export interface SocialNetworkEdge {
  node: SocialNetwork;
  cursor: String;
}

export interface SocialNetworkEdgePromise
  extends Promise<SocialNetworkEdge>,
    Fragmentable {
  node: <T = SocialNetworkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SocialNetworkEdgeSubscription
  extends Promise<AsyncIterator<SocialNetworkEdge>>,
    Fragmentable {
  node: <T = SocialNetworkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSocialNetwork {
  count: Int;
}

export interface AggregateSocialNetworkPromise
  extends Promise<AggregateSocialNetwork>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSocialNetworkSubscription
  extends Promise<AsyncIterator<AggregateSocialNetwork>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CauseSubscriptionPayload {
  mutation: MutationType;
  node: Cause;
  updatedFields: String[];
  previousValues: CausePreviousValues;
}

export interface CauseSubscriptionPayloadPromise
  extends Promise<CauseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CausePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CausePreviousValuesPromise>() => T;
}

export interface CauseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CauseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CauseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CausePreviousValuesSubscription>() => T;
}

export interface CausePreviousValues {
  id: Int;
  description?: String;
}

export interface CausePreviousValuesPromise
  extends Promise<CausePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  description: () => Promise<String>;
}

export interface CausePreviousValuesSubscription
  extends Promise<AsyncIterator<CausePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface SocialNetworkSubscriptionPayload {
  mutation: MutationType;
  node: SocialNetwork;
  updatedFields: String[];
  previousValues: SocialNetworkPreviousValues;
}

export interface SocialNetworkSubscriptionPayloadPromise
  extends Promise<SocialNetworkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SocialNetworkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SocialNetworkPreviousValuesPromise>() => T;
}

export interface SocialNetworkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SocialNetworkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SocialNetworkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SocialNetworkPreviousValuesSubscription>() => T;
}

export interface SocialNetworkPreviousValues {
  id: Int;
  facebook?: String;
  instagram?: String;
  linkedin?: String;
  twitter?: String;
}

export interface SocialNetworkPreviousValuesPromise
  extends Promise<SocialNetworkPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  facebook: () => Promise<String>;
  instagram: () => Promise<String>;
  linkedin: () => Promise<String>;
  twitter: () => Promise<String>;
}

export interface SocialNetworkPreviousValuesSubscription
  extends Promise<AsyncIterator<SocialNetworkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  facebook: () => Promise<AsyncIterator<String>>;
  instagram: () => Promise<AsyncIterator<String>>;
  linkedin: () => Promise<AsyncIterator<String>>;
  twitter: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: Int;
  email: String;
  firstname: String;
  lastname: String;
  phone?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Cause",
    embedded: false
  },
  {
    name: "SocialNetwork",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
