module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCause {
  count: Int!
}

type AggregateSocialNetwork {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Cause {
  id: Int!
  description: String
  userId: User
}

type CauseConnection {
  pageInfo: PageInfo!
  edges: [CauseEdge]!
  aggregate: AggregateCause!
}

input CauseCreateInput {
  description: String
  userId: UserCreateOneWithoutCauseInput
}

input CauseCreateManyWithoutUserIdInput {
  create: [CauseCreateWithoutUserIdInput!]
  connect: [CauseWhereUniqueInput!]
}

input CauseCreateWithoutUserIdInput {
  description: String
}

type CauseEdge {
  node: Cause!
  cursor: String!
}

enum CauseOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
}

type CausePreviousValues {
  id: Int!
  description: String
}

input CauseScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [CauseScalarWhereInput!]
  OR: [CauseScalarWhereInput!]
  NOT: [CauseScalarWhereInput!]
}

type CauseSubscriptionPayload {
  mutation: MutationType!
  node: Cause
  updatedFields: [String!]
  previousValues: CausePreviousValues
}

input CauseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CauseWhereInput
  AND: [CauseSubscriptionWhereInput!]
  OR: [CauseSubscriptionWhereInput!]
  NOT: [CauseSubscriptionWhereInput!]
}

input CauseUpdateInput {
  description: String
  userId: UserUpdateOneWithoutCauseInput
}

input CauseUpdateManyDataInput {
  description: String
}

input CauseUpdateManyMutationInput {
  description: String
}

input CauseUpdateManyWithoutUserIdInput {
  create: [CauseCreateWithoutUserIdInput!]
  delete: [CauseWhereUniqueInput!]
  connect: [CauseWhereUniqueInput!]
  set: [CauseWhereUniqueInput!]
  disconnect: [CauseWhereUniqueInput!]
  update: [CauseUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [CauseUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [CauseScalarWhereInput!]
  updateMany: [CauseUpdateManyWithWhereNestedInput!]
}

input CauseUpdateManyWithWhereNestedInput {
  where: CauseScalarWhereInput!
  data: CauseUpdateManyDataInput!
}

input CauseUpdateWithoutUserIdDataInput {
  description: String
}

input CauseUpdateWithWhereUniqueWithoutUserIdInput {
  where: CauseWhereUniqueInput!
  data: CauseUpdateWithoutUserIdDataInput!
}

input CauseUpsertWithWhereUniqueWithoutUserIdInput {
  where: CauseWhereUniqueInput!
  update: CauseUpdateWithoutUserIdDataInput!
  create: CauseCreateWithoutUserIdInput!
}

input CauseWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  userId: UserWhereInput
  AND: [CauseWhereInput!]
  OR: [CauseWhereInput!]
  NOT: [CauseWhereInput!]
}

input CauseWhereUniqueInput {
  id: Int
}

scalar Long

type Mutation {
  createCause(data: CauseCreateInput!): Cause!
  updateCause(data: CauseUpdateInput!, where: CauseWhereUniqueInput!): Cause
  updateManyCauses(data: CauseUpdateManyMutationInput!, where: CauseWhereInput): BatchPayload!
  upsertCause(where: CauseWhereUniqueInput!, create: CauseCreateInput!, update: CauseUpdateInput!): Cause!
  deleteCause(where: CauseWhereUniqueInput!): Cause
  deleteManyCauses(where: CauseWhereInput): BatchPayload!
  createSocialNetwork(data: SocialNetworkCreateInput!): SocialNetwork!
  updateSocialNetwork(data: SocialNetworkUpdateInput!, where: SocialNetworkWhereUniqueInput!): SocialNetwork
  updateManySocialNetworks(data: SocialNetworkUpdateManyMutationInput!, where: SocialNetworkWhereInput): BatchPayload!
  upsertSocialNetwork(where: SocialNetworkWhereUniqueInput!, create: SocialNetworkCreateInput!, update: SocialNetworkUpdateInput!): SocialNetwork!
  deleteSocialNetwork(where: SocialNetworkWhereUniqueInput!): SocialNetwork
  deleteManySocialNetworks(where: SocialNetworkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  cause(where: CauseWhereUniqueInput!): Cause
  causes(where: CauseWhereInput, orderBy: CauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cause]!
  causesConnection(where: CauseWhereInput, orderBy: CauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CauseConnection!
  socialNetwork(where: SocialNetworkWhereUniqueInput!): SocialNetwork
  socialNetworks(where: SocialNetworkWhereInput, orderBy: SocialNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialNetwork]!
  socialNetworksConnection(where: SocialNetworkWhereInput, orderBy: SocialNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialNetworkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type SocialNetwork {
  id: Int!
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
  userId: User!
}

type SocialNetworkConnection {
  pageInfo: PageInfo!
  edges: [SocialNetworkEdge]!
  aggregate: AggregateSocialNetwork!
}

input SocialNetworkCreateInput {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
  userId: UserCreateOneWithoutSocialNetworkInput!
}

input SocialNetworkCreateOneWithoutUserIdInput {
  create: SocialNetworkCreateWithoutUserIdInput
  connect: SocialNetworkWhereUniqueInput
}

input SocialNetworkCreateWithoutUserIdInput {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
}

type SocialNetworkEdge {
  node: SocialNetwork!
  cursor: String!
}

enum SocialNetworkOrderByInput {
  id_ASC
  id_DESC
  facebook_ASC
  facebook_DESC
  instagram_ASC
  instagram_DESC
  linkedin_ASC
  linkedin_DESC
  twitter_ASC
  twitter_DESC
}

type SocialNetworkPreviousValues {
  id: Int!
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
}

type SocialNetworkSubscriptionPayload {
  mutation: MutationType!
  node: SocialNetwork
  updatedFields: [String!]
  previousValues: SocialNetworkPreviousValues
}

input SocialNetworkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SocialNetworkWhereInput
  AND: [SocialNetworkSubscriptionWhereInput!]
  OR: [SocialNetworkSubscriptionWhereInput!]
  NOT: [SocialNetworkSubscriptionWhereInput!]
}

input SocialNetworkUpdateInput {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
  userId: UserUpdateOneRequiredWithoutSocialNetworkInput
}

input SocialNetworkUpdateManyMutationInput {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
}

input SocialNetworkUpdateOneRequiredWithoutUserIdInput {
  create: SocialNetworkCreateWithoutUserIdInput
  update: SocialNetworkUpdateWithoutUserIdDataInput
  upsert: SocialNetworkUpsertWithoutUserIdInput
  connect: SocialNetworkWhereUniqueInput
}

input SocialNetworkUpdateWithoutUserIdDataInput {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
}

input SocialNetworkUpsertWithoutUserIdInput {
  update: SocialNetworkUpdateWithoutUserIdDataInput!
  create: SocialNetworkCreateWithoutUserIdInput!
}

input SocialNetworkWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  facebook: String
  facebook_not: String
  facebook_in: [String!]
  facebook_not_in: [String!]
  facebook_lt: String
  facebook_lte: String
  facebook_gt: String
  facebook_gte: String
  facebook_contains: String
  facebook_not_contains: String
  facebook_starts_with: String
  facebook_not_starts_with: String
  facebook_ends_with: String
  facebook_not_ends_with: String
  instagram: String
  instagram_not: String
  instagram_in: [String!]
  instagram_not_in: [String!]
  instagram_lt: String
  instagram_lte: String
  instagram_gt: String
  instagram_gte: String
  instagram_contains: String
  instagram_not_contains: String
  instagram_starts_with: String
  instagram_not_starts_with: String
  instagram_ends_with: String
  instagram_not_ends_with: String
  linkedin: String
  linkedin_not: String
  linkedin_in: [String!]
  linkedin_not_in: [String!]
  linkedin_lt: String
  linkedin_lte: String
  linkedin_gt: String
  linkedin_gte: String
  linkedin_contains: String
  linkedin_not_contains: String
  linkedin_starts_with: String
  linkedin_not_starts_with: String
  linkedin_ends_with: String
  linkedin_not_ends_with: String
  twitter: String
  twitter_not: String
  twitter_in: [String!]
  twitter_not_in: [String!]
  twitter_lt: String
  twitter_lte: String
  twitter_gt: String
  twitter_gte: String
  twitter_contains: String
  twitter_not_contains: String
  twitter_starts_with: String
  twitter_not_starts_with: String
  twitter_ends_with: String
  twitter_not_ends_with: String
  userId: UserWhereInput
  AND: [SocialNetworkWhereInput!]
  OR: [SocialNetworkWhereInput!]
  NOT: [SocialNetworkWhereInput!]
}

input SocialNetworkWhereUniqueInput {
  id: Int
}

type Subscription {
  cause(where: CauseSubscriptionWhereInput): CauseSubscriptionPayload
  socialNetwork(where: SocialNetworkSubscriptionWhereInput): SocialNetworkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: Int!
  cause(where: CauseWhereInput, orderBy: CauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cause!]
  email: String!
  firstname: String!
  lastname: String!
  phone: String
  socialNetwork: SocialNetwork!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  cause: CauseCreateManyWithoutUserIdInput
  email: String!
  firstname: String!
  lastname: String!
  phone: String
  socialNetwork: SocialNetworkCreateOneWithoutUserIdInput!
}

input UserCreateOneWithoutCauseInput {
  create: UserCreateWithoutCauseInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSocialNetworkInput {
  create: UserCreateWithoutSocialNetworkInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCauseInput {
  email: String!
  firstname: String!
  lastname: String!
  phone: String
  socialNetwork: SocialNetworkCreateOneWithoutUserIdInput!
}

input UserCreateWithoutSocialNetworkInput {
  cause: CauseCreateManyWithoutUserIdInput
  email: String!
  firstname: String!
  lastname: String!
  phone: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  phone_ASC
  phone_DESC
}

type UserPreviousValues {
  id: Int!
  email: String!
  firstname: String!
  lastname: String!
  phone: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  cause: CauseUpdateManyWithoutUserIdInput
  email: String
  firstname: String
  lastname: String
  phone: String
  socialNetwork: SocialNetworkUpdateOneRequiredWithoutUserIdInput
}

input UserUpdateManyMutationInput {
  email: String
  firstname: String
  lastname: String
  phone: String
}

input UserUpdateOneRequiredWithoutSocialNetworkInput {
  create: UserCreateWithoutSocialNetworkInput
  update: UserUpdateWithoutSocialNetworkDataInput
  upsert: UserUpsertWithoutSocialNetworkInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCauseInput {
  create: UserCreateWithoutCauseInput
  update: UserUpdateWithoutCauseDataInput
  upsert: UserUpsertWithoutCauseInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCauseDataInput {
  email: String
  firstname: String
  lastname: String
  phone: String
  socialNetwork: SocialNetworkUpdateOneRequiredWithoutUserIdInput
}

input UserUpdateWithoutSocialNetworkDataInput {
  cause: CauseUpdateManyWithoutUserIdInput
  email: String
  firstname: String
  lastname: String
  phone: String
}

input UserUpsertWithoutCauseInput {
  update: UserUpdateWithoutCauseDataInput!
  create: UserCreateWithoutCauseInput!
}

input UserUpsertWithoutSocialNetworkInput {
  update: UserUpdateWithoutSocialNetworkDataInput!
  create: UserCreateWithoutSocialNetworkInput!
}

input UserWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  cause_every: CauseWhereInput
  cause_some: CauseWhereInput
  cause_none: CauseWhereInput
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  socialNetwork: SocialNetworkWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
  email: String
}
`
      }
    