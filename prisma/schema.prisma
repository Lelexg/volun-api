generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ability {
  id          Int           @id @default(autoincrement())
  description String
  userId      Int?
  projectId   Int?
  Project     Project?      @relation(fields: [projectId], references: [id])
  User        User?         @relation(fields: [userId], references: [id])
  Achievement Achievement[]
}

model Achievement {
  id                 Int                  @id @default(autoincrement())
  score              Decimal
  userId             Int
  abilityId          Int
  Ability            Ability              @relation(fields: [abilityId], references: [id])
  User               User                 @relation(fields: [userId], references: [id])
  AchievementHistory AchievementHistory[]
}

model AchievementHistory {
  id            Int         @id @default(autoincrement())
  achievementId Int
  Achievement   Achievement @relation(fields: [achievementId], references: [id])
}

model Cause {
  description String
  id          Int      @id @default(autoincrement())
  userId      Int?
  projectId   Int?
  Project     Project? @relation(fields: [projectId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
}

model Enrolment {
  id              Int             @id @default(autoincrement())
  startDate       DateTime
  endDate         DateTime
  description     String
  projectId       Int?
  userId          Int?
  statusId        Int
  Project         Project?        @relation(fields: [projectId], references: [id])
  EnrolmentStatus EnrolmentStatus @relation(fields: [statusId], references: [id])
  User            User?           @relation(fields: [userId], references: [id])
}

model EnrolmentStatus {
  id          Int         @id @default(autoincrement())
  description String
  Enrolment   Enrolment[]
}

model Favorite {
  id        Int     @id @default(autoincrement())
  userId    Int?
  projectId Int
  Project   Project @relation(fields: [projectId], references: [id])
  User      User?   @relation(fields: [userId], references: [id])
}

model Locality {
  id           Int            @id @default(autoincrement())
  street       String?
  number       String?
  neighborhood String?
  lat          String?
  lng          String?
  city         String?
  state        String?
  country      String?
  Organization Organization[]
  Project      Project[]
  User         User[]
}

model Notification {
  id             Int          @id @default(autoincrement())
  date           DateTime
  vizualized     Boolean      @default(false)
  userId         Int?
  organizationId Int
  Organization   Organization @relation(fields: [organizationId], references: [id])
  User           User?        @relation(fields: [userId], references: [id])
}

model Organization {
  id               Int              @id @default(autoincrement())
  name             String
  description      String?
  email            String
  phone            String?
  website          String?
  facebook         String?
  linkedIn         String?
  twitter          String?
  instagram        String?
  typeId           Int
  localityId       Int
  Locality         Locality         @relation(fields: [localityId], references: [id])
  OrganizationType OrganizationType @relation(fields: [typeId], references: [id])
  Notification     Notification[]
  Photo            Photo[]
  Project          Project[]
  Rating           Rating[]
}

model OrganizationType {
  id           Int            @id @default(autoincrement())
  description  String
  Organization Organization[]
}

model Photo {
  id             Int          @id @default(autoincrement())
  description    String
  projectId      Int?
  organizationId Int
  Organization   Organization @relation(fields: [organizationId], references: [id])
  Project        Project?     @relation(fields: [projectId], references: [id])
  User           User[]
}

model Project {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  startDate      DateTime
  endDate        DateTime?
  workload       Int
  organizationId Int
  statusId       Int
  localityId     Int?
  Locality       Locality?     @relation(fields: [localityId], references: [id])
  Organization   Organization  @relation(fields: [organizationId], references: [id])
  ProjectStatus  ProjectStatus @relation(fields: [statusId], references: [id])
  Ability        Ability[]
  Cause          Cause[]
  Enrolment      Enrolment[]
  Favorite       Favorite[]
  Photo          Photo[]
  Review         Review[]
  Tag            Tag[]
}

model ProjectStatus {
  id          Int       @id @default(autoincrement())
  description String
  Project     Project[]
}

model Rating {
  id             Int          @id @default(autoincrement())
  rate           Decimal
  count          Int
  organizationId Int
  Organization   Organization @relation(fields: [organizationId], references: [id])
}

model Review {
  id          Int      @id @default(autoincrement())
  description String
  rate        Int
  date        DateTime
  projectId   Int?
  userId      Int?
  Project     Project? @relation(fields: [projectId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
}

model Tag {
  id          Int      @id @default(autoincrement())
  description String
  projectId   Int?
  Project     Project? @relation(fields: [projectId], references: [id])
}

model User {
  email        String         @unique
  firstname    String
  id           Int            @id @default(autoincrement())
  lastname     String
  phone        String?
  bio          String?
  document     String?
  facebook     String?
  linkedIn     String?
  twitter      String?
  instagram    String?
  localityId   Int?
  photoId      Int?
  Locality     Locality?      @relation(fields: [localityId], references: [id])
  Photo        Photo?         @relation(fields: [photoId], references: [id])
  Ability      Ability[]
  Achievement  Achievement[]
  Cause        Cause[]
  Enrolment    Enrolment[]
  Favorite     Favorite[]
  Notification Notification[]
  Review       Review[]
}
